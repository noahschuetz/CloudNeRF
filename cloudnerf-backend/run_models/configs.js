import { join } from "path";

export const runModelsConfigs = [
	{
		modelId: "instant-ngp",
		displayName: "Instant-NGP",
		dockerImage: "dromni/nerfstudio",
		installCmd: "docker",
		installCmdArgs: ["pull", "dromni/nerfstudio:1.0.0"],
		runCmd: "docker",
		runCmdArgs: [
			"run",
			"--gpus",
			"all",
			"-v",
			`${process.env.ROOT_DIR}/tmp/instant-ngp/:/workspace/`,
			"--rm",
			"--shm-size=12gb",
			"dromni/nerfstudio:1.0.0",
			"ns-train",
			"instant-ngp",
			"--timestamp",
			"latest",
			"--data",
			"/workspace/data",
		],
	},
	{
		modelId: "nerfacto",
		displayName: "Nerfacto",
		dockerImage: "dromni/nerfstudio",
		installCmd: "docker",
		installCmdArgs: ["pull", "dromni/nerfstudio:1.0.0"],
		runCmd: "docker",
		runCmdArgs: [
			"run",
			"--gpus",
			"all",
			"-v",
			`${process.env.ROOT_DIR}/tmp/nerfacto/:/workspace/`,
			"--rm",
			"--shm-size=12gb",
			"dromni/nerfstudio:1.0.0",
			"ns-train",
			"nerfacto",
			"--pipeline.model.predict-normals",
			"True",
			"--max-num-iterations",
			"500",
			"--timestamp",
			"latest",
			"--data",
			"/workspace/data",
		],
		exportCmd: "docker",
		exportCmdArgs: [
			"run",
			"--gpus",
			"all",
			"-v",
			`${process.env.ROOT_DIR}/tmp/nerfacto/:/workspace/`,
			"--rm",
			"--shm-size=12gb",
			"dromni/nerfstudio:1.0.0",
			"ns-export",
			"poisson",
			"--load-config",
			"outputs/data/nerfacto/latest/config.yml",
			"--output-dir",
			process.env.MESH_RESULTS_DIR_NAME,
		],
	},
	{
		modelId: "kplanes",
		displayName: "K-Planes",
		dockerImage: "cloudnerf/kplanes",
		installCmd: "docker",
		installCmdArgs: [
			"build",
			"-t",
			"cloudnerf/kplanes",
			"-",
			"<",
			join(process.env.ROOT_DIR, "/run_models/dockerfiles/Dockerfile.kplanes"),
		],
		runCmd: "docker",
		runCmdArgs: [
			"run",
			"--gpus",
			"all",
			"-v",
			`${process.env.ROOT_DIR}/tmp/kplanes/:/workspace/`,
			"--rm",
			"--shm-size=12gb",
			"cloudnerf/kplanes",
			"ns-train",
			"kplanes",
			"--timestamp",
			"latest",
			"--data",
			"/workspace/data",
			"nerfstudio-data",
		],
	},
];
